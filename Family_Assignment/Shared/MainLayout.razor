@inherits LayoutComponentBase
@using Family_Assignment.Authentication
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<AuthorizeView>
    <NotAuthorized >
        <div class="page">
            <div class="sidebar">
                <NavMenu/>
            </div>

            <div class="main">
                <div class="top-row px-4">
                    <button id="buttons" class="btn btn-outline-dark" @onclick="NavigateToLogin"target="_blank">Sign in</button>
                    <button id="buttons" class="btn btn-outline-dark" @onclick="NavigateToRegister" target="_blank">Sign up</button>
                    <button id="buttons" class="btn btn-outline-dark" href="https://docs.microsoft.com/aspnet/" target="_blank">About</button>
                </div>
                <div class="content px-4">
                    @Body
                </div>
            </div>
        </div>
    </NotAuthorized>
    <Authorized >
        <div class="page">
            <div class="sidebar">
                <NavMenu/>
            </div>
            <div class="main">
                <div class="top-row px-4">
                    <button id="buttons" class="btn btn-outline-dark" @onclick="PerformLogout" target="_blank">Sign Out</button>
                    <button id="buttons" class="btn btn-outline-dark" href="https://docs.microsoft.com/aspnet/" target="_blank">About</button>
                </div>
                <div class="content px-4">
                    @Body
                </div>
            </div >
        </div>
    </Authorized>
</AuthorizeView>

@code
{
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {   
            NavigationManager.NavigateTo($"/login");
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
    

    public async Task PerformLogout()
    {
        ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
        NavigationManager.NavigateTo("/");
    }

    public void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    public void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

}